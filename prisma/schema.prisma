// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByNulls"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model PassagemDados {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notaFiscal Int
  expedicao  String

  financeiroPassagem         Financeiro[]
  expedicaoPassagem          Expedicao[]
  expedicao2Passagem         Expedicao2[]
  logisticaPassagem          Logistica[]
  saidaPassagem              Saida[]
  confirmacaoEntregaPassagem ConfirmacaoEntrega[]
  retornoPassagem            Retorno[]
  canhotoPassagem            Canhoto[]
}

model Financeiro {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   PassagemDados @relation(fields: [authorId], references: [id])
  authorId Int

  vendedor              String
  orcamento             Int
  cliente               String
  tipoFaturamento       String
  valor                 String
  formaPagamento        String
  parcelas              String
  vendaFrete            Boolean
  retiraEntrega         String
  freteConta            String
  entregaCadastro       Boolean
  localCobranca         String
  observacao            String
  observacaoFinanceiro  String
  tipoFrete             String
  valorFrete            String
  dataEntrega           String
  statusNotaFiscal      String
  operadorNotaFiscal    String
  responsavelNotaFiscal String
}

model Expedicao {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   PassagemDados @relation(fields: [authorId], references: [id])
  authorId Int

  responsavelNotaFiscal String
  statusNotaFiscal      String
}

model Expedicao2 {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   PassagemDados @relation(fields: [authorId], references: [id])
  authorId Int

  responsavelNotaFiscal String
  statusNotaFiscal      String
}

model Logistica {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   PassagemDados @relation(fields: [authorId], references: [id])
  authorId Int

  responsavelNotaFiscal String
  statusNotaFiscal      String
}

model Saida {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   PassagemDados @relation(fields: [authorId], references: [id])
  authorId Int

  notaFiscal     Int
  nomeConferente String
  placa          String
  motorista      String
  cidadeDestino  String
  hodometro      Int
  dataHoraSaida  String
  obs            String
}

model ConfirmacaoEntrega {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   PassagemDados @relation(fields: [authorId], references: [id])
  authorId Int

  motorista        String
  codigoEntrega    Int
  cidade           String
  entregaConcluida String
  obs              String
}

model Retorno {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   PassagemDados @relation(fields: [authorId], references: [id])
  authorId Int

  codigoEntrega Int
  placa         String
  hodometro     Int
  data          String
  obs           String
}

model Canhoto {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   PassagemDados @relation(fields: [authorId], references: [id])
  authorId Int

  notaFiscal         Int
  motorista          Int
  statusCanhoto      String
  responsavelCanhoto Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
